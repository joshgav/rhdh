apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config-rhdh
data:
  app-config-rhdh.yaml: |
    app:
      title: RHDH on OpenShift (joshgav)
      baseUrl: https://backstage-backstage-${bs_app_name}.${openshift_ingress_domain}/

    backend:
      auth:
        externalAccess:
          - type: legacy
            options:
              subject: legacy-default-config
              secret: '${BACKEND_SECRET}'
      baseUrl: https://backstage-backstage-${bs_app_name}.${openshift_ingress_domain}/
      cors:
        origin: https://backstage-backstage-${bs_app_name}.${openshift_ingress_domain}/

    organization:
      name: joshgav @ Red Hat

    auth:
      environment: production
      providers:
        github:
          production:
            clientId: ${GITHUB_APP_CLIENT_ID}
            clientSecret: ${GITHUB_APP_CLIENT_SECRET}
        microsoft:
          production:
            clientId: ${AZURE_CLIENT_ID}
            clientSecret: ${AZURE_CLIENT_SECRET}
            tenantId: ${AZURE_TENANT_ID}
    signInPage: microsoft

    integrations:
      github:
        - host: github.com
          apps:
            - appId: ${GITHUB_APP_ID}
              clientId: ${GITHUB_APP_CLIENT_ID}
              clientSecret: ${GITHUB_APP_CLIENT_SECRET}
              webhookUrl: ${GITHUB_APP_WEBHOOK_URL}
              webhookSecret: ${GITHUB_APP_WEBHOOK_SECRET}
              privateKey: |
                ${GITHUB_APP_PRIVATE_KEY}
      aws:
        accounts:
          - accountId: ${AWS_ACCOUNT_ID}
            accessKeyId: ${AWS_ACCESS_KEY_ID}
            secretAccessKey: ${AWS_SECRET_ACCESS_KEY}
            region: us-east-1

    catalog:
      import:
        entityFilename: catalog-info.yaml
        pullRequestBranchName: backstage-integration
      rules:
      - allow: [Component, System, Group, Resource, Location, Template, API]
      locations:
      - type: url
        target: https://github.com/joshgav/spring-apiserver/blob/main/backstage-catalog-info.yaml
      ## example Backstage templates
      - type: url
        target: https://github.com/backstage/backstage/blob/master/plugins/scaffolder-backend/sample-templates/remote-templates.yaml
      ## example Janus (Red Hat) templates
      - type: url
        target: https://github.com/janus-idp/backstage-showcase/blob/main/catalog-entities/all.yaml
      - type: url
        target: https://github.com/janus-idp/software-templates/blob/main/showcase-templates.yaml
      providers:
        github:
          providerId:
            organization: "${GITHUB_ORGANIZATION}"
            schedule:
              frequency:
                minutes: 30
              initialDelay:
                seconds: 15
              timeout:
                minutes: 15
        githubOrg:
          id: production
          githubUrl: https://github.com
          orgs: [ "${GITHUB_ORGANIZATION}" ]
          schedule:
            frequency:
              minutes: 30
            initialDelay:
              seconds: 15
            timeout:
              minutes: 60
        microsoftGraphOrg:
          providerId:
            target: https://graph.microsoft.com/v1.0
            tenantId: ${AZURE_TENANT_ID}
            clientId: ${AZURE_CLIENT_ID}
            clientSecret: ${AZURE_CLIENT_SECRET}
            schedule:
              frequency:
                minutes: 30
              initialDelay:
                seconds: 15
              timeout:
                minutes: 60

    argocd:
      appLocatorMethods:
        - type: config
          instances:
            - name: argo
              url: https://openshift-gitops-server-openshift-gitops.${openshift_ingress_domain}/
              token: ${ARGOCD_AUTH_TOKEN}

    proxy:
      endpoints:
        # Plugin: Quay
        '/quay/api':
          target: https://${registry_hostname}
          headers:
            X-Requested-With: 'XMLHttpRequest'
            Authorization: 'Bearer ${QUAY_TOKEN}'
          changeOrigin: true
          secure: true
          pathRewrite:
            '^/api/proxy/quay/api': '/'

    # techdocs:
    #   builder: 'local'
    #   generator:
    #     runIn: 'local'
    #   publisher:
    #     type: 'local'

    kubernetes:
      serviceLocatorMethod:
        type: multiTenant
      clusterLocatorMethods:
        - type: config
          clusters:
            - url: https://kubernetes.default.svc/
              name: local-cluster
              # caFile: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              authProvider: serviceAccount
              # don't specify this attribute to force lookup in pod in cluster
              # serviceAccountToken: ${K8S_SERVICEACCOUNT_TOKEN}
              dashboardUrl: https://console-openshift-console.${openshift_ingress_domain}/
              dashboardApp: openshift
              skipTLSVerify: true
              skipMetricsLookup: false
      customResources:
        - group: tekton.dev
          apiVersion: v1beta1
          plural: pipelineruns
        - group: tekton.dev
          apiVersion: v1beta1
          plural: taskruns
        - group: 'route.openshift.io'
          apiVersion: 'v1'
          plural: 'routes'
